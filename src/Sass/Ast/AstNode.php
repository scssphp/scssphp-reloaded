<?php
/**
 * @copyright 2018 Google Inc.
 * @license https://opensource.org/licenses/MIT MIT
 *
 * @link https://github.com/sass/dart-sass
 * @see lib/src/ast/node.dart@aa18e65f5
 */
namespace Sass\Ast;

use DartLang\SourceSpan\FileSpan;
use Sass\Ast\FakeAstNode;

/**
 * A node in an abstract syntax tree.
 *
 * @author Anthon Pang <apang@softwaredevelopment.ca>
 */
abstract class AstNode
{
    /**
     * The source span associated with the node.
     *
     * This indicates where in the source Sass or SCSS stylesheet the node was
     * defined.
     *
     * @var FileSpan
     */
    protected $span;

    /**
     * Returns an [AstNode] that doesn't have any data and whose span is
     * generated by [callback].
     *
     * A number of APIs take [AstNode]s instead of spans because computing spans
     * eagerly can be expensive. This allows arbitrary spans to be passed to
     * those callbacks while still being lazily computed.
     *
     * @return AstNode
     */
    public static function fake(callable $callback)
    {
        return new FakeAstNode($callback);
    }

    /**
     * @return FileSpan
     */
    public function getSpan()
    {
        return $this->span;
    }
}
